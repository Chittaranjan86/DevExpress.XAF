variables:
  PastBuild: false
  Latest: false
  
trigger: 
    paths:
      exclude:
        - .github/FUNDING.yml
        - src/Modules/Readme.md
        - src/Modules/AutoCommit/Readme.md
        - src/Modules/CloneMemberValue/Readme.md
        - src/Modules/HideToolBar/Readme.md
        - src/Modules/MasterDetail/Readme.md
        - src/Modules/ModelMapper/Readme.md
        - src/Modules/ModelViewInheritance/Readme.md
        - src/Modules/ProgressBarViewItem/Readme.md
        - src/Modules/Reactive/Readme.md
        - src/Modules/SuppressConfirmation/Readme.md
        - src/Modules/ViewEditMode/Readme.md
        - src/Modules/RefreshView/Readme.md
        - src/Modules/GridListEditor/Readme.md
        - src/Modules/OneView/Readme.md
        - src/Modules/Reactive.Logger/Readme.md
        - src/Modules/Reactive.Logger.Hub/Readme.md
        - src/Modules/Reactive.Logger.Client.Win/Readme.md
        - README.md
    branches:
      include:
        - master
jobs:
- job: TestsRunBuild
  strategy: 
    parallel: 1
  pool:
    vmImage: windows-2019
  variables:
    - group: keys
  steps:
  - checkout: self
  - task: PowerShell@2
    displayName: Build
    inputs:
      targetType: 'inline'
      script: |
        $goArgs=@{
          Branch ='$(Build.SourceBranchName)'
          SourcePath ='$(System.DefaultworkingDirectory)'
          GitHubUserName ='$(GitHubUserName)' 
          Token ='$(GitHubToken)' 
          DXApiFeed ='$(DXApiFeed) '
          ArtifactStagingDirectory ='$(build.artifactstagingdirectory)' 
          BinDirectory ='$(System.DefaultworkingDirectory)\bin '
          AzureToken ='$(AzureToken)'
          PastBuild =$false 
          CustomVersion ='$(Build.DefinitionName)'
        }
        "goArgs:"
        $goArgs|out-string
        & .\tools\build\pipeline.ps1 @goArgs
      pwsh: true
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Packages'
    inputs:
      PathtoPublish: '$(System.DefaultworkingDirectory)\bin'
      ArtifactName: 'Xpand.XAF.Modules.Bin'
- job: TestPhaseEasyTest
  strategy:
    parallel: 2
  dependsOn: TestsRunBuild
  pool:
    vmImage: windows-2019
  variables:
    - group: keys
  steps:
    - checkout: none
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'specific'
        downloadPath: '$(System.DefaultworkingDirectory)'
    - task: VSTest@2
      displayName: 'VsTest - testAssemblies'
      inputs:
        searchFolder: '$(System.DefaultWorkingDirectory)'
        testSelector: 'testAssemblies'
        testAssemblyVer2: |
          **\**All*Tests.dll
          !**\*ModelMapper*.dll
          !**\*Hub*.dll
          !**\*TestAdapter.dll
          !**\obj\**    
        diagnosticsEnabled: true
        codeCoverageEnabled: true
        distributionBatchType: basedOnAssembly
        runInParallel: false
        runSettingsFile: .\Xpand.XAF.Modules.Bin\Tests.runsettings
        runTestsInIsolation: true
        collectDumpOn: never
- job: TestPhase1
  strategy:
    parallel: 14
  dependsOn: TestPhaseEasyTest
  pool:
    vmImage: windows-2019
  variables:
    - group: keys
  steps:
    - checkout: none
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'specific'
        downloadPath: '$(System.DefaultworkingDirectory)'
    - task: VSTest@2
      displayName: 'VsTest - testAssemblies'
      inputs:
        searchFolder: '$(System.DefaultWorkingDirectory)'
        testSelector: 'testAssemblies'
        testAssemblyVer2: |
          **\**Tests.dll
          !**\*ModelMapper*.dll
          !**\*Hub*.dll
          !**\*TestAdapter.dll
          !**\obj\**    
        diagnosticsEnabled: true
        codeCoverageEnabled: true
        distributionBatchType: basedOnAssembly
        runInParallel: false
        runSettingsFile: .\Xpand.XAF.Modules.Bin\Tests.runsettings
        runTestsInIsolation: false
        collectDumpOn: never
- job: TestModelMapper
  strategy:
    parallel: 10
  dependsOn: TestPhase1
  pool:
    vmImage: windows-2019
  variables:
    - group: keys
  steps:
    - checkout: none
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'specific'
        downloadPath: '$(System.DefaultworkingDirectory)'
    - task: VSTest@2
      displayName: 'VsTest - testAssemblies'
      inputs:
        searchFolder: '$(System.DefaultWorkingDirectory)'
        testSelector: 'testAssemblies'
        testAssemblyVer2: |
          **\*ModelMapper*.dll
          !**\*Hub*.dll
          !**\*TestAdapter.dll
          !**\obj\**   
        diagnosticsEnabled: true
        codeCoverageEnabled: true
        distributionBatchType: basedOnTestCases
        runInParallel: false
        runTestsInIsolation: true
        runSettingsFile: .\Xpand.XAF.Modules.Bin\Tests.runsettings
        collectDumpOn: never
        
- job: Release
  dependsOn: TestModelMapper
  strategy: 
    parallel: 1
  pool:
    vmImage: windows-2019
  variables:
    - group: keys
  steps:
  - checkout: self
  - task: PowerShell@2
    displayName: Build
    inputs:
      targetType: 'inline'
      script: |
        $goArgs=@{
          Branch ='$(Build.SourceBranchName)'
          SourcePath ='$(System.DefaultworkingDirectory)'
          GitHubUserName ='$(GitHubUserName)' 
          Token ='$(GitHubToken)' 
          DXApiFeed ='$(DXApiFeed) '
          ArtifactStagingDirectory ='$(build.artifactstagingdirectory)' 
          BinDirectory ='$(System.DefaultworkingDirectory)\bin '
          AzureToken ='$(AzureToken)'
          PastBuild =$false 
          CustomVersion ='$(Build.DefinitionName)'
        }
        "goArgs:"
        $goArgs|out-string
        & .\tools\build\pipeline.ps1 @goArgs
      pwsh: true
  - task: PowerShell@2
    displayName: PublishNugets
    inputs:
      targetType: 'inline'
      script: |
        $goArgs=@{
          GitHubUserName ='$(GitHubUserName)' 
          AzureToken ='$(AzureToken)'
          Token ='$(GitHubToken)' 
          Branch ='$(Build.SourceBranchName)'
          SourcesRoot ='$(System.DefaultworkingDirectory)'
          ApiKey ='$(NugetApiKey)'
          LocalPackageSource ='$(System.DefaultWorkingDirectory)\bin\Nupkg' 
          PastBuild =$(PastBuild) 
          CustomVersion ='$(Build.DefinitionName)'
        }
        "goArgs:"
        $goArgs|out-string
        & .\tools\build\pipeline.ps1 @goArgs
      pwsh: true
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Packages'
    inputs:
      PathtoPublish: '$(System.DefaultworkingDirectory)\bin'
      ArtifactName: 'Release.Bin'
