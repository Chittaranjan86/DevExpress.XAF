variables:
  Latest: false
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages

trigger: 
    paths:
      exclude:
        - .github/FUNDING.yml
        - src/Modules/Readme.md
        - src/Modules/AutoCommit/Readme.md
        - src/Modules/CloneMemberValue/Readme.md
        - src/Modules/HideToolBar/Readme.md
        - src/Modules/MasterDetail/Readme.md
        - src/Modules/ModelMapper/Readme.md
        - src/Modules/ModelViewInheritance/Readme.md
        - src/Modules/ProgressBarViewItem/Readme.md
        - src/Modules/Reactive/Readme.md
        - src/Modules/SuppressConfirmation/Readme.md
        - src/Modules/ViewEditMode/Readme.md
        - src/Modules/RefreshView/Readme.md
        - src/Modules/GridListEditor/Readme.md
        - src/Modules/OneView/Readme.md
        - src/Modules/Reactive.Logger/Readme.md
        - src/Modules/Reactive.Logger.Hub/Readme.md
        - src/Modules/Reactive.Logger.Client.Win/Readme.md
        - README.md
    branches:
      include:
        - master
jobs:
- job: BuildModules
  strategy: 
    parallel: 1
  pool:
    vmImage: windows-2019
  variables:
    - group: keys
  steps:
  - checkout: self
  - task: CacheBeta@0
    inputs:
      key: paket5 | paket.lock
      path: $(Pipeline.Workspace)/.nuget/packages
    displayName: Cache NuGet packages
  - task: PowerShell@2
    displayName: Build
    inputs:
      targetType: inline
      script: |
        Copy-Item '$(System.DefaultWorkingDirectory)\paket.lock' '$(System.DefaultWorkingDirectory)\paket.lock1' -verbose
        'paket.lock','paket.dependencies'|ForEach-Object{
            $cache='$(Pipeline.Workspace)/.nuget/packages/$_'
            # Get-Content $cache -Raw -ErrorAction Continue 
            Copy-Item $cache $(System.DefaultWorkingDirectory)\$_ -Force -ErrorAction Continue -verbose
        }
        $goArgs = @{
            Token ='$(GitHubToken)'
            AzureToken ='$(AzureToken)' 
            GitHubUserName ='$(GitHubUserName)' 
            DXApiFeed ='$(DXApiFeed)'
            Branch                   = '$(Build.SourceBranchName)'
            SourcePath               = '$(System.DefaultworkingDirectory)'
            ArtifactStagingDirectory = '$(Build.Artifactstagingdirectory)'
            BinDirectory             = '$(System_DefaultworkingDirectory)\bin'
            CustomVersion            = '$(Build.DefinitionName)'
        }
        "goArgs:"
        $goArgs | Out-String
        
        & '$(System.DefaultWorkingDirectory)\tools\Build\BuildPipeline.ps1' @goArgs
        'paket.lock','paket.dependencies'|ForEach-Object{
            Copy-Item '$(System.DefaultWorkingDirectory)\$_' '$(Pipeline.Workspace)/.nuget/packages/$_' -Force -ErrorAction Continue -verbose
        }
        Copy-Item '$(System.DefaultWorkingDirectory)\paket.lock1' '$(System.DefaultWorkingDirectory)\paket.lock' -Force -verbose
      pwsh: true
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: UnitTests'
    inputs:
      PathtoPublish: '$(System.DefaultworkingDirectory)\buildstage\bin'
      ArtifactName: 'Bin'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: XafApplication'
    inputs:
      PathtoPublish: '$(System.DefaultworkingDirectory)\buildstage\TestApplication'
      ArtifactName: 'Tests'
  # - task: PublishBuildArtifacts@1
  #   displayName: 'Publish Artifact: Bin'
  #   inputs:
  #     PathtoPublish: '$(System.DefaultworkingDirectory)\buildstage\bin'
  #     ArtifactName: 'Bin'
  # - task: PublishBuildArtifacts@1
  #   displayName: 'Publish Artifact: Source'
  #   inputs:
  #     PathtoPublish: '$(System.DefaultworkingDirectory)\buildstage\source'
  #     ArtifactName: 'Source'
  